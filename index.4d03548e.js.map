{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    // static INITIAL_STATE = [\n    //   [0, 0, 0, 0],\n    //   [0, 0, 0, 0],\n    //   [0, 0, 0, 0],\n    //   [0, 0, 0, 0],\n    // ];\n    // static getInitialState(state) {\n    //   return state || Game.INITIAL_STATE.map((row) => [...row]);\n    // }\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        // this.state = Game.getInitialState(initialState);\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.hasMoved = false;\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    moveLeft() {\n        if (this.status === \"playing\") return this.makeMove(\"left\");\n    }\n    moveRight() {\n        if (this.status === \"playing\") return this.makeMove(\"right\");\n    }\n    moveUp() {\n        if (this.status === \"playing\") return this.makeMove(\"up\");\n    }\n    moveDown() {\n        if (this.status === \"playing\") return this.makeMove(\"down\");\n    }\n    makeMove(direction) {\n        this.hasMoved = this.moveLines(direction);\n        if (this.hasMoved) {\n            this.generateNewCell();\n            this.hasMoved = false;\n            this.getStatus();\n            return true;\n        }\n        return false;\n    }\n    moveLines(direction, { precededCheckMove: precededCheckMove } = {\n        precededCheckMove: false\n    }) {\n        const size = this.state.length;\n        const isVertical = direction === \"up\" || direction === \"down\";\n        const state = precededCheckMove ? this.getStateCopy() : this.state;\n        const oldState = this.getStateCopy();\n        for(let i = 0; i < size; i++){\n            const line = [];\n            for(let j = 0; j < size; j++)line.push(isVertical ? this.state[j][i] : this.state[i][j]);\n            const newLine = this.mergeLine(line, direction, {\n                precededCheckMove: precededCheckMove\n            });\n            for(let j = 0; j < size; j++)if (isVertical) state[j][i] = newLine[j];\n            else state[i][j] = newLine[j];\n        }\n        return this.isMove(oldState, state);\n    }\n    isMove(oldState, newState) {\n        for(let i = 0; i < oldState.length; i++)for(let j = 0; j < oldState.length; j++){\n            if (oldState[i][j] !== newState[i][j]) return true; // if there is a diff in state\n        }\n        return false; // if there is no diff in state\n    }\n    mergeLine(line, direction, { precededCheckMove: precededCheckMove }) {\n        const size = line.length;\n        const stack = [];\n        const newLine = new Array(size).fill(0);\n        const startIndex = direction === \"up\" || direction === \"left\" ? 0 : size - 1;\n        const endIndex = direction === \"up\" || direction === \"left\" ? size : -1;\n        const step = direction === \"up\" || direction === \"left\" ? 1 : -1;\n        let newIndex = startIndex;\n        for(let i = startIndex; i !== endIndex; i += step){\n            const cellValue = line[i];\n            if (cellValue !== 0) {\n                if (stack.length === 0) stack.push(cellValue);\n                else if (stack[0] === cellValue) {\n                    const mergedValue = +stack[0] + +cellValue;\n                    newLine[newIndex] = stack.pop() + cellValue;\n                    newIndex += step;\n                    if (!precededCheckMove) this.score += mergedValue;\n                } else {\n                    newLine[newIndex] = stack.pop();\n                    newIndex += step;\n                    stack.push(cellValue);\n                }\n            }\n        }\n        if (stack.length > 0) newLine[newIndex] = stack.pop();\n        return newLine;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStateCopy() {\n        return this.state.map((row)=>[\n                ...row\n            ]);\n    }\n    getStatus() {\n        if (this.checkWin()) this.status = \"win\";\n        else if (this.status === \"playing\" && !this.hasMoreMove()) this.status = \"lose\";\n        return this.status;\n    }\n    checkWin() {\n        return this.state.some((line)=>line.includes(2048));\n    }\n    start() {\n        this.status = \"playing\";\n        this.generateNewCell();\n        this.generateNewCell();\n    }\n    restart() {\n        // this.state = Game.getInitialState();\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    updateField(field) {\n        for(let i = 0; i < field.rows.length; i++)for(let j = 0; j < field.rows[i].cells.length; j++){\n            const cellValue = this.state[i][j];\n            field.rows[i].cells[j].textContent = cellValue !== 0 ? cellValue : \"\";\n            if (cellValue !== \"\") field.rows[i].cells[j].setAttribute(\"class\", `field-cell field-cell--${cellValue}`);\n        }\n        const fragment = document.createDocumentFragment();\n        Array.from(field.rows).forEach((row)=>fragment.appendChild(row));\n        return fragment;\n    }\n    generateNewCell() {\n        const lines = this.state;\n        const cellNum = Math.random() < 0.1 ? 4 : 2;\n        const emptyCells = [];\n        for(let i = 0; i < lines.length; i++)for(let j = 0; j < lines[i].length; j++){\n            const cellValue = lines[i][j];\n            if (cellValue === 0) emptyCells.push({\n                row: i,\n                cell: j\n            });\n        }\n        if (!emptyCells.length) {\n            this.getStatus();\n            return false; // do not generate new cell\n        }\n        const randomEmptyCellIndex = Math.floor(Math.random() * emptyCells.length);\n        const { row: row, cell: cell } = emptyCells[randomEmptyCellIndex];\n        this.state[row][cell] = cellNum;\n    }\n    hasMoreMove() {\n        return this.moveLines(\"up\", {\n            precededCheckMove: true\n        }) || this.moveLines(\"down\", {\n            precededCheckMove: true\n        }) || this.moveLines(\"left\", {\n            precededCheckMove: true\n        }) || this.moveLines(\"right\", {\n            precededCheckMove: true\n        });\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$field = document.querySelector(\".game-field tbody\");\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$messages = document.querySelectorAll(\".message\");\nconst $09e991522ca7e64e$var$scoreDisplay = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$STATUS_CLASSES = {\n    start: \"message-start\",\n    win: \"message-win\",\n    lose: \"message-lose\"\n};\nconst $09e991522ca7e64e$var$INITIAL_STATE = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nlet $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports($09e991522ca7e64e$var$INITIAL_STATE);\nlet $09e991522ca7e64e$var$firstMove = true;\nlet $09e991522ca7e64e$var$gameStart = false;\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startBtn.textContent === \"Start\") {\n        $09e991522ca7e64e$var$gameStart = !$09e991522ca7e64e$var$gameStart; // if startBtn push one more time\n        if ($09e991522ca7e64e$var$gameStart) $09e991522ca7e64e$var$game.start();\n        else {\n            $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports($09e991522ca7e64e$var$INITIAL_STATE);\n            $09e991522ca7e64e$var$game.start();\n            $09e991522ca7e64e$var$gameStart = true;\n        }\n        $09e991522ca7e64e$var$showMessage(null);\n        $09e991522ca7e64e$var$showScore($09e991522ca7e64e$var$game.getScore());\n        $09e991522ca7e64e$var$updateField();\n    }\n    if ($09e991522ca7e64e$var$startBtn.textContent === \"Restart\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateStartBtn(false);\n        $09e991522ca7e64e$var$firstMove = true;\n        $09e991522ca7e64e$var$showMessage($09e991522ca7e64e$var$STATUS_CLASSES.start);\n        $09e991522ca7e64e$var$showScore($09e991522ca7e64e$var$game.getScore());\n        $09e991522ca7e64e$var$updateField();\n    }\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.status === \"idle\") return false;\n    if ($09e991522ca7e64e$var$game.status === \"playing\") {\n        const keyActions = {\n            ArrowUp: ()=>$09e991522ca7e64e$var$game.moveUp(),\n            ArrowRight: ()=>$09e991522ca7e64e$var$game.moveRight(),\n            ArrowDown: ()=>$09e991522ca7e64e$var$game.moveDown(),\n            ArrowLeft: ()=>$09e991522ca7e64e$var$game.moveLeft()\n        };\n        const action = keyActions[e.key];\n        if (action && action()) $09e991522ca7e64e$var$updateField();\n    }\n    if ($09e991522ca7e64e$var$firstMove) {\n        $09e991522ca7e64e$var$updateStartBtn(true);\n        $09e991522ca7e64e$var$firstMove = false;\n    }\n    $09e991522ca7e64e$var$showScore($09e991522ca7e64e$var$game.getScore());\n    if ($09e991522ca7e64e$var$game.status === \"win\") $09e991522ca7e64e$var$showMessage($09e991522ca7e64e$var$STATUS_CLASSES.win);\n    if ($09e991522ca7e64e$var$game.status === \"lose\") $09e991522ca7e64e$var$showMessage($09e991522ca7e64e$var$STATUS_CLASSES.lose);\n});\nfunction $09e991522ca7e64e$var$showMessage(statusClass) {\n    $09e991522ca7e64e$var$messages.forEach((message)=>{\n        if (message.classList.contains(statusClass)) message.classList.remove(\"hidden\");\n        else message.classList.add(\"hidden\");\n    });\n}\nfunction $09e991522ca7e64e$var$showScore(score) {\n    $09e991522ca7e64e$var$scoreDisplay.textContent = score;\n}\nfunction $09e991522ca7e64e$var$updateField() {\n    const fragment = $09e991522ca7e64e$var$game.updateField($09e991522ca7e64e$var$field);\n    $09e991522ca7e64e$var$field.appendChild(fragment);\n}\nfunction $09e991522ca7e64e$var$updateStartBtn(isRestart) {\n    if (isRestart) {\n        $09e991522ca7e64e$var$startBtn.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startBtn.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startBtn.textContent = \"Restart\";\n    } else {\n        $09e991522ca7e64e$var$startBtn.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$startBtn.classList.add(\"start\");\n        $09e991522ca7e64e$var$startBtn.textContent = \"Start\";\n    }\n}\n\n\n//# sourceMappingURL=index.4d03548e.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst field = document.querySelector('.game-field tbody');\nconst startBtn = document.querySelector('.start');\nconst messages = document.querySelectorAll('.message');\nconst scoreDisplay = document.querySelector('.game-score');\n\nconst STATUS_CLASSES = {\n  start: 'message-start',\n  win: 'message-win',\n  lose: 'message-lose',\n};\n\nconst INITIAL_STATE = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet game = new Game(INITIAL_STATE);\nlet firstMove = true;\nlet gameStart = false;\n\nstartBtn.addEventListener('click', () => {\n  if (startBtn.textContent === 'Start') {\n    gameStart = !gameStart; // if startBtn push one more time\n\n    if (gameStart) {\n      game.start();\n    } else {\n      game = new Game(INITIAL_STATE);\n      game.start();\n      gameStart = true;\n    }\n    showMessage(null);\n    showScore(game.getScore());\n\n    updateField();\n  }\n\n  if (startBtn.textContent === 'Restart') {\n    game.restart();\n    updateStartBtn(false);\n    firstMove = true;\n\n    showMessage(STATUS_CLASSES.start);\n    showScore(game.getScore());\n\n    updateField();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.status === 'idle') {\n    return false;\n  }\n\n  if (game.status === 'playing') {\n    const keyActions = {\n      ArrowUp: () => game.moveUp(),\n      ArrowRight: () => game.moveRight(),\n      ArrowDown: () => game.moveDown(),\n      ArrowLeft: () => game.moveLeft(),\n    };\n\n    const action = keyActions[e.key];\n\n    if (action && action()) {\n      updateField();\n    }\n  }\n\n  if (firstMove) {\n    updateStartBtn(true);\n    firstMove = false;\n  }\n\n  showScore(game.getScore());\n\n  if (game.status === 'win') {\n    showMessage(STATUS_CLASSES.win);\n  }\n\n  if (game.status === 'lose') {\n    showMessage(STATUS_CLASSES.lose);\n  }\n});\n\nfunction showMessage(statusClass) {\n  messages.forEach((message) => {\n    if (message.classList.contains(statusClass)) {\n      message.classList.remove('hidden');\n    } else {\n      message.classList.add('hidden');\n    }\n  });\n}\n\nfunction showScore(score) {\n  scoreDisplay.textContent = score;\n}\n\nfunction updateField() {\n  const fragment = game.updateField(field);\n\n  field.appendChild(fragment);\n}\n\nfunction updateStartBtn(isRestart) {\n  if (isRestart) {\n    startBtn.classList.remove('start');\n    startBtn.classList.add('restart');\n    startBtn.textContent = 'Restart';\n  } else {\n    startBtn.classList.remove('restart');\n    startBtn.classList.add('start');\n    startBtn.textContent = 'Start';\n  }\n}\n","'use strict';\n\nclass Game {\n  // static INITIAL_STATE = [\n  //   [0, 0, 0, 0],\n  //   [0, 0, 0, 0],\n  //   [0, 0, 0, 0],\n  //   [0, 0, 0, 0],\n  // ];\n\n  // static getInitialState(state) {\n  //   return state || Game.INITIAL_STATE.map((row) => [...row]);\n  // }\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    // this.state = Game.getInitialState(initialState);\n    this.state = this.initialState.map((row) => [...row]);\n    this.hasMoved = false;\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.status === 'playing') {\n      return this.makeMove('left');\n    }\n  }\n  moveRight() {\n    if (this.status === 'playing') {\n      return this.makeMove('right');\n    }\n  }\n  moveUp() {\n    if (this.status === 'playing') {\n      return this.makeMove('up');\n    }\n  }\n\n  moveDown() {\n    if (this.status === 'playing') {\n      return this.makeMove('down');\n    }\n  }\n\n  makeMove(direction) {\n    this.hasMoved = this.moveLines(direction);\n\n    if (this.hasMoved) {\n      this.generateNewCell();\n      this.hasMoved = false;\n      this.getStatus();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  moveLines(direction, { precededCheckMove } = { precededCheckMove: false }) {\n    const size = this.state.length;\n    const isVertical = direction === 'up' || direction === 'down';\n\n    const state = precededCheckMove ? this.getStateCopy() : this.state;\n    const oldState = this.getStateCopy();\n\n    for (let i = 0; i < size; i++) {\n      const line = [];\n\n      for (let j = 0; j < size; j++) {\n        line.push(isVertical ? this.state[j][i] : this.state[i][j]);\n      }\n\n      const newLine = this.mergeLine(line, direction, { precededCheckMove });\n\n      for (let j = 0; j < size; j++) {\n        if (isVertical) {\n          state[j][i] = newLine[j];\n        } else {\n          state[i][j] = newLine[j];\n        }\n      }\n    }\n\n    return this.isMove(oldState, state);\n  }\n\n  isMove(oldState, newState) {\n    for (let i = 0; i < oldState.length; i++) {\n      for (let j = 0; j < oldState.length; j++) {\n        if (oldState[i][j] !== newState[i][j]) {\n          return true; // if there is a diff in state\n        }\n      }\n    }\n\n    return false; // if there is no diff in state\n  }\n\n  mergeLine(line, direction, { precededCheckMove }) {\n    const size = line.length;\n    const stack = [];\n    const newLine = new Array(size).fill(0);\n\n    const startIndex =\n      direction === 'up' || direction === 'left' ? 0 : size - 1;\n    const endIndex = direction === 'up' || direction === 'left' ? size : -1;\n    const step = direction === 'up' || direction === 'left' ? 1 : -1;\n\n    let newIndex = startIndex;\n\n    for (let i = startIndex; i !== endIndex; i += step) {\n      const cellValue = line[i];\n\n      if (cellValue !== 0) {\n        if (stack.length === 0) {\n          stack.push(cellValue);\n        } else {\n          if (stack[0] === cellValue) {\n            const mergedValue = +stack[0] + +cellValue;\n\n            newLine[newIndex] = stack.pop() + cellValue;\n            newIndex += step;\n\n            if (!precededCheckMove) {\n              this.score += mergedValue;\n            }\n          } else {\n            newLine[newIndex] = stack.pop();\n            newIndex += step;\n            stack.push(cellValue);\n          }\n        }\n      }\n    }\n\n    if (stack.length > 0) {\n      newLine[newIndex] = stack.pop();\n    }\n\n    return newLine;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStateCopy() {\n    return this.state.map((row) => [...row]);\n  }\n\n  getStatus() {\n    if (this.checkWin()) {\n      this.status = 'win';\n    } else if (this.status === 'playing' && !this.hasMoreMove()) {\n      this.status = 'lose';\n    }\n\n    return this.status;\n  }\n\n  checkWin() {\n    return this.state.some((line) => line.includes(2048));\n  }\n\n  start() {\n    this.status = 'playing';\n    this.generateNewCell();\n    this.generateNewCell();\n  }\n\n  restart() {\n    // this.state = Game.getInitialState();\n    this.state = this.initialState.map((row) => [...row]);\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  updateField(field) {\n    for (let i = 0; i < field.rows.length; i++) {\n      for (let j = 0; j < field.rows[i].cells.length; j++) {\n        const cellValue = this.state[i][j];\n\n        field.rows[i].cells[j].textContent = cellValue !== 0 ? cellValue : '';\n\n        if (cellValue !== '') {\n          field.rows[i].cells[j].setAttribute(\n            'class',\n            `field-cell field-cell--${cellValue}`,\n          );\n        }\n      }\n    }\n\n    const fragment = document.createDocumentFragment();\n\n    Array.from(field.rows).forEach((row) => fragment.appendChild(row));\n\n    return fragment;\n  }\n\n  generateNewCell() {\n    const lines = this.state;\n    const cellNum = Math.random() < 0.1 ? 4 : 2;\n\n    const emptyCells = [];\n\n    for (let i = 0; i < lines.length; i++) {\n      for (let j = 0; j < lines[i].length; j++) {\n        const cellValue = lines[i][j];\n\n        if (cellValue === 0) {\n          emptyCells.push({\n            row: i,\n            cell: j,\n          });\n        }\n      }\n    }\n\n    if (!emptyCells.length) {\n      this.getStatus();\n\n      return false; // do not generate new cell\n    }\n\n    const randomEmptyCellIndex = Math.floor(Math.random() * emptyCells.length);\n    const { row, cell } = emptyCells[randomEmptyCellIndex];\n\n    this.state[row][cell] = cellNum;\n  }\n\n  hasMoreMove() {\n    return (\n      this.moveLines('up', { precededCheckMove: true }) ||\n      this.moveLines('down', { precededCheckMove: true }) ||\n      this.moveLines('left', { precededCheckMove: true }) ||\n      this.moveLines('right', { precededCheckMove: true })\n    );\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","constructor","initialState","state","map","row","hasMoved","status","score","moveLeft","makeMove","moveRight","moveUp","moveDown","direction","moveLines","generateNewCell","getStatus","precededCheckMove","size","length","isVertical","getStateCopy","oldState","i","line","j","push","newLine","mergeLine","isMove","newState","stack","Array","fill","startIndex","endIndex","step","newIndex","cellValue","mergedValue","pop","getScore","getState","checkWin","hasMoreMove","some","includes","start","restart","updateField","field","rows","cells","textContent","setAttribute","fragment","document","createDocumentFragment","from","forEach","appendChild","lines","emptyCells","cell","randomEmptyCellIndex","Math","floor","random","$09e991522ca7e64e$var$field","querySelector","$09e991522ca7e64e$var$startBtn","$09e991522ca7e64e$var$messages","querySelectorAll","$09e991522ca7e64e$var$scoreDisplay","$09e991522ca7e64e$var$STATUS_CLASSES","win","lose","$09e991522ca7e64e$var$INITIAL_STATE","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$firstMove","$09e991522ca7e64e$var$gameStart","$09e991522ca7e64e$var$showMessage","statusClass","message","classList","contains","remove","add","$09e991522ca7e64e$var$showScore","$09e991522ca7e64e$var$updateField","$09e991522ca7e64e$var$updateStartBtn","isRestart","addEventListener","e","action","keyActions","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","key"],"version":3,"file":"index.4d03548e.js.map"}